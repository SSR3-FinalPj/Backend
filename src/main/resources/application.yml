server:
  servlet:
    session:
      cookie:
        name: SID
        http-only: true
        secure: false        # 로컬 http로 테스트면 false, 운영 배포시 true 권장
        same-site: Lax       # 도커라이징할 때는 none 권장

jwt:
  issuer: ssj3pj
  secret: ${JWT_SECRET:mySecretKey1234567890123456789012345678901234567890}
  access-token-expiration: 900000        # 15분 (ms)
  refresh-token-expiration: 1209600000   # 14일 (ms)

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/youtube_db
    username: postgres
    password: pass1234
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  elasticsearch:
    uris: ${ELASTICSEARCH_URIS:http://localhost:9200}

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
    elasticsearch:
      repositories:
        enabled: true

  jackson:
    serialization:
      write-dates-as-timestamps: false
    date-format: "yyyy-MM-dd HH:mm:ss"
    time-zone: Asia/Seoul

  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    consumer:
      group-id: consumer-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      ack-mode: manual
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  topics:
    kafka:
      raw: citydata
      googleAccessToken: googleToken
      raw2: youtubedata
      raw3: redditdata

youtube:
  upload:
    chunk-size-bytes: 8388608    # 8MB
    connect-timeout-ms: 10000    # 10s
    read-timeout-ms: 600000      # 10m

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:5173}

springdoc:
  swagger-ui:
    path: /swagger-ui
    display-request-duration: true
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs

app:
  es:
    indices:
      citydata: ${CITYDATA_INDEX:citydata}
      reddit: ${REDDIT_INDEX:reddit_posts}
      youtube: ${YOUTUBE_INDEX:youtube_videos}

prompt:
  server:
    base: ${BRIDGE_BASE_URL:http://127.0.0.1:8001}
    bridge.connect-timeout-ms: 5000
    bridge.read-timeout-ms: 10000

google:
  client-id: ${YOUR_CLIENT_ID}
  client-secret: ${YOUR_CLIENT_SECRET}
  redirect-uri: ${GOOGLE_REDIRECT_URL:http://localhost:8080/api/google/callback}
  token-uri: https://oauth2.googleapis.com/token
  skew-seconds: 120

reddit:
  client-id: ${REDDIT_CLIENT_ID}
  client-secret: ${REDDIT_CLIENT_SECRET}
  user-agent: SSRPJ3/1.0 by Classic_Run_4414
  authorize-url: https://www.reddit.com/api/v1/authorize
  token-url: https://www.reddit.com/api/v1/access_token
  api-base: https://oauth.reddit.com
  redirect-uri: ${REDDIT_REDIRECT_URI:http://localhost:8080/api/reddit/callback}
  scopes: identity edit history flair mysubreddits privatemessages read report save submit subscribe vote

security:
  oauth:
    state-ttl-seconds: 600   # google state 변수 유효시간(10분)

aws:
  region: us-east-2
  # 환경변수가 우선, 비워도 됨
  access-key-id: ${AWS-ACCESS-KEY}
  secret-access-key: ${AWS-SECRET}
  s3:
    bucket: ssr-ai-video
  presign:
    ttl-minutes: 15

sse:
  reconnect-millis: 3000
  heartbeat-millis: 25000
  auth:
    query-param: sse_token
  dev:
    allow-userid-param: false
